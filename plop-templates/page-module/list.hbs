<template>
    <div>
        <page-header title="XX管理" />
        <page-main>
            <el-button type="primary" icon="el-icon-plus" @click="onCreate">新增XX</el-button>
            <search-bar>
                <el-form :model="search" size="small" label-width="100px" label-suffix="：">
                    <el-row>
                        <el-col :span="12">
                            <el-form-item />
                        </el-col>
                    </el-row>
                    <el-form-item>
                        <el-button type="primary" icon="el-icon-search" @click="getDataList">筛选</el-button>
                    </el-form-item>
                </el-form>
            </search-bar>
            <batch-action-bar :data="dataList" :selection-data="selectionDataList" @checkAll="$refs.table.toggleAllSelection()" @checkNull="$refs.table.clearSelection()">
                <el-button size="small">单个批量操作按钮</el-button>
                <el-button-group>
                    <el-button size="small">批量操作按钮组1</el-button>
                    <el-button size="small">批量操作按钮组2</el-button>
                </el-button-group>
            </batch-action-bar>
            <el-table ref="table" v-loading="loading" class="list-table" :data="dataList" border stripe highlight-current-row @sort-change="onSortChange" @selection-change="selectionDataList = $event">
                <el-table-column type="selection" width="40" />
                <el-table-column prop="name" label="名称" />
                <el-table-column label="操作" width="250" align="center">
                    <template slot-scope="scope">
                        <el-button type="primary" size="mini" plain @click="onEdit(scope.row)">编辑</el-button>
                        <el-button type="danger" size="mini" plain @click="onDel(scope.row)">删除</el-button>
                    </template>
                </el-table-column>
            </el-table>
            <el-pagination :current-page="pagination.page" :total="pagination.total" :page-size="pagination.size" :page-sizes="pagination.sizes" :layout="pagination.layout" :hide-on-single-page="false" class="pagination" background @size-change="onSizeChange" @current-change="onCurrentChange" />
        </page-main>
    </div>
</template>

<script>
import paginationMixin from '@/mixins/pagination'

export default {
    inject: ['reload'],
    name: '{{ properCase componentName }}',
    mixins: [paginationMixin],
    props: {},
    data() {
        return {
            search: {},
            selectionDataList: [],
            dataList: []
        }
    },
    beforeRouteEnter(to, from, next) {
        // 进入页面时，先将当前页面的 name 信息存入 keep-alive 全局状态
        next(vm => {
            vm.$store.commit('keepAlive/add', '{{ properCase componentName }}')
        })
    },
    beforeRouteLeave(to, from, next) {
        // 因为并不是所有的路由跳转都需要将当前页面进行缓存，例如最常见的情况，从列表页进入详情页，则需要将列表页缓存，而从列表页跳转到其它页面，则不需要将列表页缓存
        if (!['XX'].includes(to.name)) {
            // 注意：上面校验的是路由的 name ，下面记录的是当前页面的 name
            this.$store.commit('keepAlive/remove', '{{ properCase componentName }}')
        }
        next()
    },
    created() {},
    mounted() {
        this.getDataList()
        this.$eventBus.$on('getDataList', () => {
            this.getDataList()
        })
    },
    beforeDestroy() {
        this.$eventBus.$off('getDataList')
    },
    methods: {
        getDataList() {
            this.loading = true
            const params = {
                from: (this.pagination.page - 1) * this.pagination.size,
                limit: this.pagination.size
            }
            this.$api.get('XX', {
                params: params
            }).then(res => {
                this.loading = false
                this.dataList = res.data.list
                this.pagination.total = res.data.count
            })
        },
        onCreate() {
            this.$router.push({
                name: 'XX'
            })
        },
        onEdit(row) {
            this.$router.push({
                name: 'XX',
                params: {
                    id: row.id
                }
            })
        },
        onDel(row) {
            this.$confirm(`确认删除「${row.name}」吗？`, '确认信息').then(() => {
                this.$api.post('XX', {
                    id: row.id
                }).then(() => {
                    this.getDataList()
                    this.$message.success({
                        message: '操作成功',
                        center: true
                    })
                })
            }).catch(() => {})
        }
    }
}
</script>

<style lang="scss" scoped>
// scss
</style>
